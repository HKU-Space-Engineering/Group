/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package learningbuddy.NoteTaking;

import java.awt.*;
import java.util.Arrays;
import javax.swing.*;


/**
 *
 * @author leepa
 */
public class NoteTaking extends javax.swing.JFrame {
    private final Canvas canvas;
    /**
     * Creates new form NoteTaking
     */
    public NoteTaking() {
        initComponents();
        setupActionListeners();
        canvas = new Canvas();
        jPanelContainer.setLayout(new BorderLayout());
        jPanelContainer.add(canvas, BorderLayout.CENTER);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelContainer = new javax.swing.JPanel();
        AddNoteButton = new javax.swing.JButton();
        categoryComboBox = new javax.swing.JComboBox<>();
        bringToFrontButton = new javax.swing.JButton();
        sendToBackButton = new javax.swing.JButton();
        addCategoryButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelContainer.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        AddNoteButton.setText("Add Note");
        AddNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNoteButtonActionPerformed(evt);
            }
        });

        categoryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Category 1", "Category 2" }));
        categoryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryComboBoxActionPerformed(evt);
            }
        });

        bringToFrontButton.setText("Bring to Front");
        bringToFrontButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bringToFrontButtonActionPerformed(evt);
            }
        });

        sendToBackButton.setText("Send to Back");
        sendToBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendToBackButtonActionPerformed(evt);
            }
        });

        addCategoryButton.setText("Add Category");
        addCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCategoryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelContainerLayout = new javax.swing.GroupLayout(jPanelContainer);
        jPanelContainer.setLayout(jPanelContainerLayout);
        jPanelContainerLayout.setHorizontalGroup(
            jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelContainerLayout.createSequentialGroup()
                .addContainerGap(683, Short.MAX_VALUE)
                .addGroup(jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(categoryComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bringToFrontButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sendToBackButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(addCategoryButton)
                        .addComponent(AddNoteButton)))
                .addContainerGap())
        );
        jPanelContainerLayout.setVerticalGroup(
            jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(109, 109, 109)
                .addComponent(bringToFrontButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendToBackButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addCategoryButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 200, Short.MAX_VALUE)
                .addComponent(AddNoteButton)
                .addContainerGap())
        );

        categoryComboBox.addActionListener(e -> canvas.filterByCategory((String) categoryComboBox.getSelectedItem()));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNoteButtonActionPerformed
                                            
        System.out.println("AddNoteButton clicked"); // Debugging line
        Note newNote = new Note();
        canvas.addNoteToCanvas(newNote); // Add the note to the canvas
        canvas.revalidate();
        canvas.repaint(); // Refresh the canvas to show the newly added note


    }//GEN-LAST:event_AddNoteButtonActionPerformed

    private void categoryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryComboBoxActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_categoryComboBoxActionPerformed

    private void setupActionListeners() {
    AddNoteButton.addActionListener(evt -> addNoteAction());
    
    
    bringToFrontButton.addActionListener(evt -> {
        if (canvas.getCurrentSelectedNote() != null) {
            canvas.bringToFront(canvas.getCurrentSelectedNote());
        }
    });
    
    sendToBackButton.addActionListener(evt -> {
        if (canvas.getCurrentSelectedNote() != null) {
            canvas.sendToBack(canvas.getCurrentSelectedNote());
        }
    });
    
    // Setup for adding a new category.
    addCategoryButton.addActionListener(evt -> addCategoryAction());

    // Handling category selection changes.
    categoryComboBox.addActionListener(evt -> canvas.filterByCategory((String) categoryComboBox.getSelectedItem()));
    }

    private void addNoteAction() {
    Note newNote = new Note("New Note", new Point(10, 10), "Category 1");
    canvas.addNoteToCanvas(newNote);
    newNote.setCanvas(canvas); // Ensure the note is aware of its canvas for interaction
    canvas.setCurrentSelectedNote(newNote); // Optionally, set the newly added note as selected
    canvas.revalidate();
    canvas.repaint(); // Refresh the canvas to show the newly added note
}

    private void addCategoryAction() {
    String newCategory = JOptionPane.showInputDialog(this, "Enter new category name:");
    if (newCategory != null && !newCategory.trim().isEmpty() &&
        ((DefaultComboBoxModel<String>) categoryComboBox.getModel()).getIndexOf(newCategory) == -1) {
        categoryComboBox.addItem(newCategory);
    } else if (newCategory != null) {
        JOptionPane.showMessageDialog(this, "Category name cannot be empty or duplicate.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    private void bringToFrontButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bringToFrontButtonActionPerformed
            bringToFrontButton.addActionListener(e -> {
        if (canvas.getCurrentSelectedNote() != null) {
            canvas.bringToFront(canvas.getCurrentSelectedNote());
        }
    });
    }//GEN-LAST:event_bringToFrontButtonActionPerformed

    private void sendToBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToBackButtonActionPerformed
        sendToBackButton.addActionListener(e -> {
        if (canvas.getCurrentSelectedNote() != null) {
            canvas.sendToBack(canvas.getCurrentSelectedNote());
    }
});
    }//GEN-LAST:event_sendToBackButtonActionPerformed

    private void addCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCategoryButtonActionPerformed
        String newCategory = JOptionPane.showInputDialog(this, "Enter new category name:");
    if (newCategory != null && !newCategory.trim().isEmpty()) {
        // Add validation for duplicate categories here
        categoryComboBox.addItem(newCategory);
    } else {
        JOptionPane.showMessageDialog(this, "Category name cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_addCategoryButtonActionPerformed
    
    private void tryAddNewCategory(String category) {
    if (category == null || category.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Category name cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    DefaultComboBoxModel<String> model = (DefaultComboBoxModel<String>) categoryComboBox.getModel();
    if (model.getIndexOf(category) != -1) {
        JOptionPane.showMessageDialog(this, "Category already exists.", "Error", JOptionPane.ERROR_MESSAGE);
    } else {
        model.addElement(category);
    }
}


    /**
     * @param args the command line arguments
     */

        public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NoteTaking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NoteTaking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NoteTaking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NoteTaking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        EventQueue.invokeLater(() -> new NoteTaking().setVisible(true));
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NoteTaking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddNoteButton;
    private javax.swing.JButton addCategoryButton;
    private javax.swing.JButton bringToFrontButton;
    private javax.swing.JComboBox<String> categoryComboBox;
    private javax.swing.JPanel jPanelContainer;
    private javax.swing.JButton sendToBackButton;
    // End of variables declaration//GEN-END:variables
}
